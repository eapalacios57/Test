pipeline {
    agent any
    options {
        buildDiscarder logRotator(
                    daysToKeepStr: '16',
                    numToKeepStr: '10'
            )
    }
    environment {
        statusCode = '';
    }  
    stages {
        //Se ejecuta las pruebas unitarias y el analisis de cobertura utilizando maven dockerizado
        /*stage('Test'){
            when { anyOf { branch 'develop'; branch 'stage'; branch 'master' } }
            agent {
                label 'docker'
            } 
            steps {
                sh 'docker run --rm -v /root/.m2:/root/.m2 -v $PWD/Back:/app -w /app maven:3-alpine mvn test'
                stash includes: 'Back/target/', name: 'mysrc'
            }
        }
        //Se realiza analisis de codigo estatico y se envian los reportes dbe las pruebas unitarias y de cobertura.
        stage('SonarQube analysis') {
            when { anyOf { branch 'develop'; branch 'stage'; branch 'master' } }
            agent {
                  label 'nodejenkinsjdk11' 
                }      
            steps {
                script {
                   last_stage = env.STAGE_NAME
                    
                    def SCANNERHOME = tool name: 'SonarScanner', type: 'hudson.plugins.sonar.SonarRunnerInstallation'                  
                   
                    unstash 'mysrc'
                    
                    if( BRANCH_NAME != 'master'){
                        branchSonar=BRANCH_NAME
                    }
                    
                    withSonarQubeEnv('SonarCloud') {
                        echo 'sonar'
                        sh "${SCANNERHOME}/bin/sonar-scanner -Dsonar.branch.name='${branchSonar}'"
                    }
                }
            }                            
        }*/
        //Aprobación por el gestor de la configuracion dependiendo de la rama.
        /*stage ("Revisión GC"){
            when { anyOf { branch 'develop'; branch 'stage'; branch 'master' } }
            steps{
                script{
                    try {
                        timeout(time: 24, unit: 'HOURS'){
                            slackSend color: '#DA33FF', message: "@GestorConfiguración \n ¿Desea autorizar el despliegue: en ${BRANCH_NAME}?\n ${env.BUILD_URL}console";
                            echo "######################################################";
                            echo "##########Desea autorizar el despliegue: en ${BRANCH_NAME}?##########";
                            input(
                                message: 
                                "######################################################");
                        }
                    }
                    catch(err){
                        echo $err;
                    }
                }
            }
        }*/
        //Pendiente por definicion
        stage("Build") {
            agent any
            when { anyOf { branch 'develop'; branch 'stage'; branch 'master' } }
            steps {
                echo "build Pendiente Definición"
              
            }
        }
        //Setea las variables almacenas en el arhivo .JSON
        
        stage('Set variables'){
            agent {
                label 'master' 
            }
            when { anyOf { branch 'develop'; branch 'stage'; branch 'master' } }
            steps{
                script{
                   JENKINS_FILE = readJSON file: 'Jenkinsfile.json';
                   urlWlBirc  = JENKINS_FILE[BRANCH_NAME]['urlWlBirc'];
                   idUserANDPassWlBirc = JENKINS_FILE[BRANCH_NAME]['idUserANDPassWlBirc'];
                   artifactNameWlBirc = JENKINS_FILE[BRANCH_NAME]['artifactNameWlBirc'];
                   domainWlBirc = JENKINS_FILE[BRANCH_NAME]['domainWlBirc'];
                   pathwlBirc = JENKINS_FILE[BRANCH_NAME]['pathwlBirc'];
                   clusterWlBirc = JENKINS_FILE[BRANCH_NAME]['clusterWlBirc'];
                   serverWlSshBirc = JENKINS_FILE[BRANCH_NAME]['serverWlSshBirc'];
                   puertoWlSshBirc = JENKINS_FILE[BRANCH_NAME]['puertoWlSshBirc'];
                   idKeyWlSshBirc = JENKINS_FILE[BRANCH_NAME]['idKeyWlSshBirc'];
                   extension = JENKINS_FILE[BRANCH_NAME]['extension'];

                   def remote = [:]
                   remote.name = 'birc'
                   remote.user = 'birc'
                   remote.host = "190.85.106.202"
                   remote.port = 2224

                   remote.allowAnyHosts = true

                   withCredentials([usernamePassword(credentialsId: 'ssh_server_weblogic', passwordVariable: 'password', usernameVariable: 'userName')]) {
                    sshCommand remote: remote, command: 'ls -la'
                    }
              
            }
       }
     }
      
       //Detener la aplicación
       stage('Stop App'){         
           agent any
           when { anyOf { branch 'develop'; branch 'stage'; branch 'master' } }
           steps{
               sh "echo Hello Word"
           }
                   /*withCredentials([
                        file(
                            credentialsId: "${idKeyWlSshBirc}",
                            variable: 'KeyWlSshBirc'), 
                        usernamePassword(
                            credentialsId: "${idUserANDPassWlBirc}",
                            usernameVariable: 'userwlBirc', passwordVariable: 'passwlBirc')
                     ]){*/
                        /*
                         sh """
                            #Subir todos los manejados o Nodos
                            ssh -p ${puertoWlSshBirc} oracle@${serverWlSshBirc} "cd ${domainWlBirc} nohup ./startNodeManager.sh > nodemanager.log 2>&1 &"
                          
                            #Habilitar programa con el script setDomainEnv.sh y detener el artefacto con el nombre de este.
                            ssh -p ${puertoWlSshBirc} oracle@${serverWlSshBirc} "cd ${domainWlBirc} && . ./setDomainEnv.sh ENV && java weblogic.Deployer -adminurl ${urlWlBirc} -username ${userwlBirc} -password ${passwlBirc} -stop -name ${artifactNameWlBirc}"
                            """*/
                            
                     
                    
                    
                }
            }
            //Mantener el estado del stage anterior
            /*
            post {
                success {
                    println "Stage Stop App <<<<<< success >>>>>>"
                    script{
                        statusCode='success';
                    }
                }
                unstable {
                    println "Stage Stop App <<<<<< unstable >>>>>>"    
                    script{
                        statusCode='unstable';
                    }              
                }
                failure {
                    println "Stage Stop App <<<<<< failure >>>>>>"
                    script{
                        statusCode='failure';
                    }
                }
            }
        }
        // Anular despligue
        /*
        stage('Undeploy'){
            agent {
                label 'master' 
            }
            when { anyOf { branch 'develop'; branch 'stage'; branch 'master' } }
            steps{
                //Manejo del status code de este stage
                catchError(buildResult: 'UNSTABLE', catchInterruptions: false, message: 'stage failed', stageResult: 'FAILURE') {
                    withCredentials([
                        file(
                            credentialsId: "${idKeyWlSshBirc}",
                            variable: 'KeyWlSshBirc'), 
                        usernamePassword(
                            credentialsId: "${idUserANDPassWlBirc}",
                            usernameVariable: 'userwlBirc', passwordVariable: 'passwlBirc')
                    ]){
                        script{                           
                            echo "Estatus Code Stage Anterior(Stop App): ${statusCode}";
                            if( statusCode == 'success' ){
                                sh """
                                    #Detener la aplicacion con el nombre del artefacto
                                    ssh -i ${KeyWlSshBirc} -p ${puertoWlSshBirc} oracle@${serverWlSshBirc} "cd ${domainWlBirc} && . ./setDomainEnv.sh ENV && java weblogic.Deployer -adminurl $urlWlBirc -username ${userwlBirc} -password $passwlBirc -undeploy -name ${artifactNameWlBirc} -targets ${clusterWlBirc} -usenonexclusivelock -graceful -ignoresessions"
                                """
                            }
                            if( statusCode == 'failure' || statusCode == 'unstable' ){
                                autoCancelled = true
                                error('Aborting the build.')
                            }
                        }
                    }
                }               
            }
            post {
                success {
                    println "Stage Undeploy <<<<<< success >>>>>>"
                    script{
                        statusCode='success';
                    } 
                    withCredentials([
                        file(
                            credentialsId: "${idKeyWlSshBirc}",
                            variable: 'KeyWlSshBirc')
                        ]){
                        echo "Copy ear to Server Web Logic";
                        sh """
                            #Copiar el artefacto hacia el servidor weblogic.
                            scp -i ${KeyWlSshBirc} -P ${puertoWlSshBirc} Despliegue/${artifactNameWlBirc}.${extension} oracle@${serverWlSshBirc}:${pathwlBirc}/DeploysTemp/${BRANCH_NAME}
                        """
                    }                   
                }
                unstable {
                    script{
                            statusCode='unstable';
                    } 
                    println "Stage Undeploy <<<<<< unstable >>>>>>"
                }
               failure {
                    println "Stage Undeploy <<<<<< failure >>>>>>"
                    withCredentials([file(credentialsId: "${idKeyWlSshBirc}",variable: 'KeyWlSshBirc')]){    
                        script{
                            if( statusCode == 'success' ){
                                echo "Start App";
                                sh """
                                    #Inicializa la aplicación como estaba en el stage anterior
                                    ssh -i ${KeyWlSshBirc} -p ${puertoWlSshBirc} oracle@${serverWlSshBirc} "cd ${domainWlBirc} && . ./setDomainEnv.sh ENV && java weblogic.Deployer -adminurl ${urlWlBirc} -username ${userwlBirc} -password ${passwlBirc} -start -name ${artifactNameWlBirc}"
                                """  
                            }                           
                            statusCode='failure';
                        }
                    }
               }
           }
        }
        stage('Deploy'){      
            agent {
                label 'master' 
            }          
            when { anyOf { branch 'develop'; branch 'stage'; branch 'master' } }
            steps{
                //Manejo del status code de este stage
                catchError(buildResult: 'UNSTABLE', catchInterruptions: false, message: 'stage failed', stageResult: 'FAILURE') {
                    withCredentials([
                        file(
                            credentialsId: "${idKeyWlSshBirc}",
                            variable: 'KeyWlSshBirc'), 
                        usernamePassword(
                            credentialsId: "${idUserANDPassWlBirc}",
                            usernameVariable: 'userwlBirc', passwordVariable: 'passwlBirc')
                    ]){
                        script{
                            echo "Estatus Code Stage Anterior (Undeploy): ${statusCode}";
                            if( statusCode == 'success' ){
                                sh"""
                                    #Inicia la aplicacion con el nuevo artefacto
                                    ssh -i ${KeyWlSshBirc} -p ${puertoWlSshBirc} oracle@${serverWlSshBirc} "cd ${domainWlBirc} && . ./setDomainEnv.sh ENV && java weblogic.Deployer -adminurl ${urlWlBirc} -username ${userwlBirc} -password ${passwlBirc} -deploy -source ${pathwlBirc}/DeploysTemp/${JOB_BASE_NAME}/${artifactNameWlBirc}.${extension} -targets ${clusterWlBirc} -usenonexclusivelock"
                                """
                            }
                            if( statusCode == 'failure' || statusCode == 'unstable' ){
                                    autoCancelled = true
                                    error('Aborting the build.')
                            }
                        }
                    }
                }
            }
            post {
                success {
                    println "Stage Deploy <<<<<< success >>>>>>"
                    script{
                        statusCode='success';
                    } 
                    withCredentials([file(credentialsId: "${idKeyWlSshBirc}",variable: 'KeyWlSshBirc')]){                    
                            echo "backup ";
                            sh """
                                #Backup del artefacto que se estaba ejecutando.
                                ssh -i ${KeyWlSshBirc} -p ${puertoWlSshBirc} oracle@${serverWlSshBirc} "cd ${pathwlBirc}/Deploy/${JOB_BASE_NAME} && mv ${artifactNameWlBirc}.${extension} ${artifactNameWlBirc}_`date +"%Y-%m-%d-%Y_%H:%M"`.${extension} && mv * ${pathwlBirc}/DeploysHistory/${JOB_BASE_NAME}"
                                ssh -i ${KeyWlSshBirc} -p ${puertoWlSshBirc} oracle@${serverWlSshBirc} "cd ${pathwlBirc}/DeploysTemp/${JOB_BASE_NAME} && mv ${artifactNameWlBirc}.${extension}  ${pathwlBirc}/Deploy/${JOB_BASE_NAME}"
                               
                            """
                    }
                }
                unstable {
                    println "Stage Deploy <<<<<< unstable >>>>>>"
                    script{
                        statusCode='unstable';
                    }
                }
                failure {
                    println "Stage Deploy <<<<<< failure >>>>>>"
                    withCredentials([file(credentialsId: "${idKeyWlSshBirc}",variable: 'KeyWlSshBirc')]){//refactoring
                        script{
                            if( statusCode == 'success' ){
                                echo "1. eleminar el contenido de la carpeta Temp, existe porque el Undeploy fue exitoso";
                                sh """
                                    ssh -i ${KeyWlSshBirc} -p ${puertoWlSshBirc} oracle@${serverWlSshBirc} 'rm -rf ${pathwlBirc}/DeploysTemp/${JOB_BASE_NAME}/${artifactNameWlBirc}.${extension}'
                                """
                                echo "2. desplegar de la carpeta deploy";
                                sh """
                                    ssh -i ${KeyWlSshBirc} -p ${puertoWlSshBirc} oracle@${serverWlSshBirc} "cd ${domainWlBirc} && . ./setDomainEnv.sh ENV && java weblogic.Deployer -adminurl ${urlWlBirc} -username ${userwlBirc} -password ${passwlBirc} -deploy -source ${pathwlBirc}/Deploy/${JOB_BASE_NAME}/${artifactNameWlBirc}.${extension} -targets ${clusterWlBirc} -usenonexclusivelock"
                                """
                                echo "3. start a la aplicación";
                                sh """
                                    ssh -i ${KeyWlSshBirc} -p ${puertoWlSshBirc} oracle@${serverWlSshBirc} "cd ${domainWlBirc} && . ./setDomainEnv.sh ENV && java weblogic.Deployer -adminurl ${urlWlBirc} -username ${userwlBirc} -password ${passwlBirc} -start -name ${artifactNameWlBirc}"
                                """
                            }
                            if( statusCode == 'failure' || statusCode == 'unstable' ){
                                echo "No es posible realizar el Deploy, se despliega la versión anterior.";
                                sh """
                                    ssh -i ${KeyWlSshBirc} -p ${puertoWlSshBirc} oracle@${serverWlSshBirc} "cd ${domainWlBirc} && . ./setDomainEnv.sh ENV && java weblogic.Deployer -adminurl ${urlWlBirc} -username ${userwlBirc} -password ${passwlBirc} -deploy -source ${pathwlBirc}/Deploy/${JOB_BASE_NAME}/${artifactNameWlBirc}.${extension} -targets ${clusterWlBirc} -usenonexclusivelock"
                                """
                                echo "start aplicación";
                                sh """
                                    ssh -i ${KeyWlSshBirc} -p ${puertoWlSshBirc} oracle@${serverWlSshBirc} "cd ${domainWlBirc} && . ./setDomainEnv.sh ENV && java weblogic.Deployer -adminurl ${urlWlBirc} -username ${userwlBirc} -password ${passwlBirc} -start -name ${artifactNameWlBirc}"
                                """
                            }
                            statusCode='failure';
                        }
                    }
                }
            }
        } 
    }
    post {         
        always{
            echo "Enviar logs...";
            //Se envia el logs de la ejecucion del jobs a traves de correo.
            emailext(attachLog:true, body: "Ejecucion de Jobs de la rama ${BRANCH_NAME}", subject: "Rama ${BRANCH_NAME} con la ejecucion del log adjunto", to: 'epalacios@qvision.us')
            
            // withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'ACCES_AWS_S3', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
            //     sh """
            //         aws --version
            //         cat /var/jenkins_home/jobs/birc-core-backen/branches/$BRANCH_NAME/builds/${BUILD_NUMBER}/log
            //         aws s3 ls s3://bucket-test-sbolivar
            //         """
            // }
            //Se envia el logs de la ejecucion del jobs hacia un bucket de S3
            // withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'ACCES_AWS_S3', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
            // some block
            //}
                //aws s3 cp /var/jenkins_home/jobs/$PROJECT_NAME/branches/$BRANCH_NAME/builds/log/$DATE_TIME S3://$BUCKET_NAME
            cleanWs();
        }
        //Manejo de las execepciones con envio de notificacion por medio de slack  segun del status que coresponda.
        success{
            script{
                if( "${BRANCH_NAME}" == "develop" || "${BRANCH_NAME}" == "qa" || "${BRANCH_NAME}" == "master" ){
                    slackSend color: '#90FF33', message: "El despliegue en ${BRANCH_NAME} \n finalizo con estado: success  \n Puedes ver los logs en: ${env.BUILD_URL}console \n app: http://${serverWlSshBirc}:7001/FACTURAELECTRONICA/";

                }
            }
        }
        unstable {
            script{
                if( "${BRANCH_NAME}" == "develop" || "${BRANCH_NAME}" == "qa" || "${BRANCH_NAME}" == "master" ){
                    slackSend color: '#FFA500', message: "El despliegue en ${BRANCH_NAME} \n finalizo con estado: unstable \n Puedes ver los logs en: ${env.BUILD_URL}console \n app: http://${serverWlSshBirc}:7001/FACTURAELECTRONICA/";
                    }
                }
        }
        failure{
            script{
                if( "${BRANCH_NAME}" == "develop" || "${BRANCH_NAME}" == "qa" || "${BRANCH_NAME}" == "master" ){
                    slackSend color: '#FF4233', message: "El despliegue en ${BRANCH_NAME} \n finalizo con estado: failure  \n Puedes ver los logs en: ${env.BUILD_URL}console \n app: http://${serverWlSshBirc}:7001/FACTURAELECTRONICA/";
                }
            }
        }    */  
    
    }


