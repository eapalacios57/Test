pipeline {
    agent any
    options {
        buildDiscarder logRotator(
                    daysToKeepStr: '16',
                    numToKeepStr: '10'
            )
    }
    environment {
        ENV_FILE="$JOB_BASE_NAME";
        statusCode = '';
    }  
    //Se realiza analisis de codigo estatico y se envian los reportes de las pruebas unitarias y de cobertura.
    stages {
        /*stage('SonarQube analysis') {
           agent {
                label 'nodejenkinsjdk11' 
           }
           steps {
               script {
                   last_stage = env.STAGE_NAME
                   def SCANNERHOME = tool name: 'sonar-scanner', type: 'hudson.plugins.sonar.SonarRunnerInstallation'
                   withSonarQubeEnv('SonarCloud'){
                         sh """
                           ${SCANNERHOME}/bin/sonar-scanner -X -Dproject.settings=sonar-project.properties -Dsonar.projectVersion=0.${BUILD_NUMBER}
                         """
                   }
               }*
               echo "SonarQube analysis";              
           }
        }*/
        stage("Quality gate") {
            /*steps {
                script {
                    last_stage = env.STAGE_NAME
                }
                waitForQualityGate abortPipeline: true
             }*/
            steps {
                script {
                    echo "Quality gate";
                }
             }
        }
        //Revisin y aprobación por el gestor de la configuracion dependiendo de la rama.
        stage ("Revisión GC"){
            when { anyOf { branch 'devops'; branch 'stage'; branch 'master' } }
            steps{
                script{
                    try {
                        timeout(time: 24, unit: 'HOURS'){
                            slackSend color: '#DA33FF', message: "@GestorConfiguración \n ¿Desea autorizar el despliegue: en ${BRANCH_NAME}?\n ${env.BUILD_URL}console";
                            echo "######################################################";
                            echo "##########Desea autorizar el despliegue: en ${BRANCH_NAME}?##########";
                            input(
                                message: 
                                "######################################################");
                    }
                    }
                    catch(err){
                        echo $err;
                    }
                }
            }
        }
        //Pendiente por definicion
        stage("Build") {
            when { anyOf { branch 'develop'; branch 'qa'; branch 'stage'; branch 'master' } }
            steps {
                echo "build Pendiente Definición"
            }
        }
        //Setea las variables almacenas en el arhivo .JSON
        stage('Set variables'){
            agent {
                label 'master' 
            }
            when { anyOf { branch 'devops'; branch 'qa'; branch 'stage'; branch 'master' } } //only qa
            steps{
                script{
                   JENKINS_FILE = readJSON file: 'Jenkinsfile.json';
                   urlWlBirc  = JENKINS_FILE[BRANCH_NAME]['urlWlBirc'];
                   idUserANDPassWlBirc = JENKINS_FILE[BRANCH_NAME]['idUserANDPassWlBirc'];
                   artifactNameWlBirc = JENKINS_FILE[BRANCH_NAME]['artifactNameWlBirc'];
                   domainWlBirc = JENKINS_FILE[BRANCH_NAME]['domainWlBirc'];
                   pathwlBirc = JENKINS_FILE[BRANCH_NAME]['pathwlBirc'];
                   clusterWlBirc = JENKINS_FILE[BRANCH_NAME]['clusterWlBirc'];
                   serverWlSshBirc = JENKINS_FILE[BRANCH_NAME]['serverWlSshBirc'];
                   puertoWlSshBirc = JENKINS_FILE[BRANCH_NAME]['puertoWlSshBirc'];
                   idKeyWlSshBirc = JENKINS_FILE[BRANCH_NAME]['idKeyWlSshBirc'];
                   extension = JENKINS_FILE[BRANCH_NAME]['extension'];
                }
            }
       }
       //Detiene la aplicación
       stage('Stop App'){
           agent {
                label 'master' 
           }                
           when { anyOf { branch 'devops'; branch 'qa'; branch 'stage'; branch 'master' } } //only qa
           steps {
                catchError(buildResult: 'UNSTABLE', catchInterruptions: false, message: 'stage failed', stageResult: 'FAILURE') {
                     withCredentials([
                        file(
                            credentialsId: "${idKeyWlSshBirc}",
                            variable: 'KeyWlSshBirc'), 
                        usernamePassword(
                            credentialsId: "${idUserANDPassWlBirc}",
                            usernameVariable: 'userwlBirc', passwordVariable: 'passwlBirc')
                     ]){
                         sh """
                            #Subir todos los manejados o Nodos si estan caidos
                            ssh -i ${KeyWlSshBirc} -p ${puertoWlSshBirc} oracle@${serverWlSshBirc} "cd ${domainWlBirc} nohup ./startNodeManager.sh > nodemanager.log 2>&1 &"
                            #Habilitar programa con el script setDomainEnv.sh y detener el artefacto con el nombre de este.
                            ssh -i ${KeyWlSshBirc} -p ${puertoWlSshBirc} oracle@${serverWlSshBirc} "cd ${domainWlBirc} && . ./setDomainEnv.sh ENV && java weblogic.Deployer -adminurl ${urlWlBirc} -username ${userwlBirc} -password ${passwlBirc} -stop -name ${artifactNameWlBirc}"
                            """
                            
                     }
                }
           }
           //Mantener el estado del stage anterior
           post {
                success {
                    println "Stage Stop App <<<<<< success >>>>>>"
                    script{
                        statusCode='success';
                    }
                }
                unstable {
                    println "Stage Stop App <<<<<< unstable >>>>>>"    
                    script{
                        statusCode='unstable';
                    }              
                }
                failure {
                    println "Stage Stop App <<<<<< failure >>>>>>"
                    script{
                        statusCode='failure';
                    }
                }
           }
       }
       // Anular despligue
       stage('Undeploy'){
           agent {
                label 'master' 
           }
           when { anyOf { branch 'devops'; branch 'qa'; branch 'stage'; branch 'master' } } //only qa
           steps{
               //Manejo del status code de este stage
                catchError(buildResult: 'UNSTABLE', catchInterruptions: false, message: 'stage failed', stageResult: 'FAILURE') {
                    withCredentials([
                        file(
                            credentialsId: "${idKeyWlSshBirc}",
                            variable: 'KeyWlSshBirc'), 
                        usernamePassword(
                            credentialsId: "${idUserANDPassWlBirc}",
                            usernameVariable: 'userwlBirc', passwordVariable: 'passwlBirc')
                    ]){
                        script{                           
                             echo "Estatus Code Stage Anterior(Stop App): ${statusCode}";
                             if( statusCode == 'success' ){
                                sh """
                                    #Detener la aplicacion con el nombre del artefacto
                                    ssh -i ${KeyWlSshBirc} -p ${puertoWlSshBirc} oracle@${serverWlSshBirc} "cd ${domainWlBirc} && . ./setDomainEnv.sh ENV && java weblogic.Deployer -adminurl $urlWlBirc -username ${userwlBirc} -password $passwlBirc -undeploy -name ${artifactNameWlBirc} -targets ${clusterWlBirc} -usenonexclusivelock -graceful -ignoresessions"
                                """
                             }
                             if( statusCode == 'failure' || statusCode == 'unstable' ){
                                  autoCancelled = true
                                  error('Aborting the build.')
                             }
                        }
                    }
                }               
           }
           post {
               success {
                   println "Stage Undeploy <<<<<< success >>>>>>"
                   script{
                        statusCode='success';
                   } 
                   withCredentials([
                        file(
                            credentialsId: "${idKeyWlSshBirc}",
                            variable: 'KeyWlSshBirc')
                        ]){
                        echo "Copy ear to Server Web Logic";
                        sh """
                            #Copiar el artefacto hacia el servidor weblogic.
                            scp -i ${KeyWlSshBirc} -P ${puertoWlSshBirc} Despliegue/${artifactNameWlBirc}.${extension} oracle@${serverWlSshBirc}:${pathwlBirc}/DeploysTemp/${BRANCH_NAME}
                        """
                  }                   
               }
               unstable {
                   script{
                        statusCode='unstable';
                   } 
                   println "Stage Undeploy <<<<<< unstable >>>>>>"
               }
               failure {
                    println "Stage Undeploy <<<<<< failure >>>>>>"
                    withCredentials([file(credentialsId: "${idKeyWlSshBirc}",variable: 'KeyWlSshBirc')]){    
                        script{
                            if( statusCode == 'success' ){
                                echo "Start App";
                                sh """
                                    #Inicializa la aplicación como estaba en el stage anterior
                                    ssh -i ${KeyWlSshBirc} -p ${puertoWlSshBirc} oracle@${serverWlSshBirc} "cd ${domainWlBirc} && . ./setDomainEnv.sh ENV && java weblogic.Deployer -adminurl ${urlWlBirc} -username ${userwlBirc} -password ${passwlBirc} -start -name ${artifactNameWlBirc}"
                                """  
                            }                           
                            statusCode='failure';
                        }
                    }
               }
           }
        }
        stage('Deploy'){      
           agent {
                label 'master' 
           }          
           when { anyOf { branch 'devops'; branch 'qa'; branch 'stage'; branch 'master' } } //only qa
           steps{
               //Manejo del status code de este stage
               catchError(buildResult: 'UNSTABLE', catchInterruptions: false, message: 'stage failed', stageResult: 'FAILURE') {
                    withCredentials([
                         file(
                              credentialsId: "${idKeyWlSshBirc}",
                              variable: 'KeyWlSshBirc'), 
                         usernamePassword(
                              credentialsId: "${idUserANDPassWlBirc}",
                              usernameVariable: 'userwlBirc', passwordVariable: 'passwlBirc')
                        ]){
                           script{
                                echo "Estatus Code Stage Anterior (Undeploy): ${statusCode}";
                                if( statusCode == 'success' ){
                                    sh"""
                                        #Inicia la aplicacion con el nuevo artefacto
                                        ssh -i ${KeyWlSshBirc} -p ${puertoWlSshBirc} oracle@${serverWlSshBirc} "cd ${domainWlBirc} && . ./setDomainEnv.sh ENV && java weblogic.Deployer -adminurl ${urlWlBirc} -username ${userwlBirc} -password ${passwlBirc} -deploy -source ${pathwlBirc}/DeploysTemp/${JOB_BASE_NAME}/${artifactNameWlBirc}.${extension} -targets ${clusterWlBirc} -usenonexclusivelock"
                                    """
                                }
                                if( statusCode == 'failure' || statusCode == 'unstable' ){
                                     autoCancelled = true
                                     error('Aborting the build.')
                                }
                           }
                         }
                    }
            }
            post {
                success {
                    println "Stage Deploy <<<<<< success >>>>>>"
                    script{
                        statusCode='success';
                    } 
                    withCredentials([file(credentialsId: "${idKeyWlSshBirc}",variable: 'KeyWlSshBirc')]){                    
                            echo "backup ";
                            sh """
                                #Backup del artefacto que se estaba ejecutando.
                                ssh -i ${KeyWlSshBirc} -p ${puertoWlSshBirc} oracle@${serverWlSshBirc} "cd ${pathwlBirc}/Deploy/${JOB_BASE_NAME} && mv ${artifactNameWlBirc}.${extension} ${artifactNameWlBirc}_`date +"%Y-%m-%d-%Y_%H:%M"`.${extension} && mv * ${pathwlBirc}/DeploysHistory/${JOB_BASE_NAME}"
                                ssh -i ${KeyWlSshBirc} -p ${puertoWlSshBirc} oracle@${serverWlSshBirc} "cd ${pathwlBirc}/DeploysTemp/${JOB_BASE_NAME} && mv ${artifactNameWlBirc}.${extension}  ${pathwlBirc}/Deploy/${JOB_BASE_NAME}"
                               
                            """
                        }
                }
                unstable {
                    println "Stage Deploy <<<<<< unstable >>>>>>"
                    script{
                        statusCode='unstable';
                    }
                }
                failure {
                    println "Stage Deploy <<<<<< failure >>>>>>"
                    withCredentials([file(credentialsId: "${idKeyWlSshBirc}",variable: 'KeyWlSshBirc')]){//refactoring
                        script{
                            if( statusCode == 'success' ){
                                echo "1. eleminar el contenido de la carpeta Temp, existe porque el Undeploy fue exitoso";
                                sh """
                                    ssh -i ${KeyWlSshBirc} -p ${puertoWlSshBirc} oracle@${serverWlSshBirc} 'rm -rf ${pathwlBirc}/DeploysTemp/${JOB_BASE_NAME}/${artifactNameWlBirc}.${extension}'
                                """
                                echo "2. desplegar de la carpeta deploy";
                                sh """
                                    ssh -i ${KeyWlSshBirc} -p ${puertoWlSshBirc} oracle@${serverWlSshBirc} "cd ${domainWlBirc} && . ./setDomainEnv.sh ENV && java weblogic.Deployer -adminurl ${urlWlBirc} -username ${userwlBirc} -password ${passwlBirc} -deploy -source ${pathwlBirc}/Deploy/${JOB_BASE_NAME}/${artifactNameWlBirc}.${extension} -targets ${clusterWlBirc} -usenonexclusivelock"
                                """
                                echo "3. start a la aplicación";
                                sh """
                                    ssh -i ${KeyWlSshBirc} -p ${puertoWlSshBirc} oracle@${serverWlSshBirc} "cd ${domainWlBirc} && . ./setDomainEnv.sh ENV && java weblogic.Deployer -adminurl ${urlWlBirc} -username ${userwlBirc} -password ${passwlBirc} -start -name ${artifactNameWlBirc}"
                                """
                            }
                            if( statusCode == 'failure' || statusCode == 'unstable' ){
                                echo "No es posible realizar el Deploy, se despliega la versión anterior.";
                                sh """
                                    ssh -i ${KeyWlSshBirc} -p ${puertoWlSshBirc} oracle@${serverWlSshBirc} "cd ${domainWlBirc} && . ./setDomainEnv.sh ENV && java weblogic.Deployer -adminurl ${urlWlBirc} -username ${userwlBirc} -password ${passwlBirc} -deploy -source ${pathwlBirc}/Deploy/${JOB_BASE_NAME}/${artifactNameWlBirc}.${extension} -targets ${clusterWlBirc} -usenonexclusivelock"
                                """
                                echo "start aplicación";
                                sh """
                                    ssh -i ${KeyWlSshBirc} -p ${puertoWlSshBirc} oracle@${serverWlSshBirc} "cd ${domainWlBirc} && . ./setDomainEnv.sh ENV && java weblogic.Deployer -adminurl ${urlWlBirc} -username ${userwlBirc} -password ${passwlBirc} -start -name ${artifactNameWlBirc}"
                                """
                            }
                            statusCode='failure';
                        }
                    }
                }
            }
       } 
       /*stage('Start App'){
           agent {
                label 'master' 
           }     
           when { anyOf { branch 'develop'; branch 'qa'; branch 'stage'; branch 'master' } } //only qa
           steps{
                catchError(buildResult: 'UNSTABLE', catchInterruptions: false, message: 'stage failed', stageResult: 'FAILURE') {
                    withCredentials([file(credentialsId: "${idKeyWlSshBirc}",variable: 'KeyWlSshBirc')]){
                        script{
                            echo "Estatus Code Stage Anterior(Deploy): ${statusCode}";
                            if( statusCode == 'success' ){
                                sh"""
                                    ssh -i ${KeyWlSshBirc} -p ${puertoWlSshBirc} oracle@${serverWlSshBirc} 'sh ${pathwlBirc}/Shell/StartApp/Start.sh' ${JOB_BASE_NAME}
                                """ 
                            }
                            if( statusCode == 'failure' || statusCode == 'unstable' ){
                                autoCancelled = true
                                error('Aborting the build.')
                            }
                        }               
                    }
                }
           }
           post {
               success {
                   println "Stage Start App <<<<<< success >>>>>>"
               }
               unstable {
                   println "Stage Start App <<<<<< unstable >>>>>>"
               }
               failure {
                   println "Stage Start App <<<<<< failure >>>>>>"
               }
           }
       }*/
    }

    post {
        always{
            echo "Enviar logs...";
            //Se envia el logs de la ejecucion del jobs a traves de correo.
             emailext(attachLog:true, body: "Ejecucion de Jobs de la rama ${BRANCH_NAME}", subject: "Rama ${BRANCH_NAME} con la ejecucion del log adjunto", to: 'epalacios@qvision.us')
             //Se envia el logs de la ejecucion del jobs hacia un bucket de S3
             //aws s3 cp /var/jenkins_home/jobs/$PROJECT_NAME/branches/$BRANCH_NAME/builds/log/$DATE_TIME S3://$BUCKET_NAME
              withCredentials([string(credentialsId: 'userAWS', variable: 'userAws'), string(credentialsId: 'keyAWS', variable: 'passaws')]) {
                // some block
                     aws s3 ls s3://dockerprueba               
             
            cleanWs();
        }
        //Manejo de las execepciones con envio de notificacion por medio de slack  segun del status que coresponda.
        success{
            script{
                if( "${BRANCH_NAME}" == "devops" || "${BRANCH_NAME}" == "qa" || "${BRANCH_NAME}" == "master" ){
                    slackSend color: '#90FF33', message: "El despliegue en ${BRANCH_NAME} \n finalizo con estado: success  \n Puedes ver los logs en: ${env.BUILD_URL}console \n app: http://${serverWlSshBirc}:7001/FACTURAELECTRONICA/";

                }
            }
        }
        unstable {
            script{
                if( "${BRANCH_NAME}" == "develop" || "${BRANCH_NAME}" == "qa" || "${BRANCH_NAME}" == "master" ){
                    slackSend color: '#FFA500', message: "El despliegue en ${BRANCH_NAME} \n finalizo con estado: unstable \n Puedes ver los logs en: ${env.BUILD_URL}console \n app: http://${serverWlSshBirc}:7001/FACTURAELECTRONICA/";
                    }
                }
        }
        failure{
            script{
                if( "${BRANCH_NAME}" == "develop" || "${BRANCH_NAME}" == "qa" || "${BRANCH_NAME}" == "master" ){
                    slackSend color: '#FF4233', message: "El despliegue en ${BRANCH_NAME} \n finalizo con estado: failure  \n Puedes ver los logs en: ${env.BUILD_URL}console \n app: http://${serverWlSshBirc}:7001/FACTURAELECTRONICA/";
                }
            }
        }         
    }
}